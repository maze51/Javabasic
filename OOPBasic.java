package e_OOP;

public class OOPBasic {
	public static void main(String[] args) {
		
		/*
		OOP : Object-Orinted Programming (객체 지향 프로그래밍)
		
		1. 객체지향언어
		  - 기존의 프로그램 언어에 몇 가지 새로운 규칙을 추가한 보다 발전된 형태이다.
		  - 규칙들을 이용해서 코드간에 서로 관계를 맺어줌으로써 보다 유기적으로 프로그램을 구성한다. // 7장
		  - 객체지향 언어의 특징
		   : 코드의 재사용성이 높다.
		   : 코드의 관리가 용이하다.
		   : 신뢰성이 높은 프로그래밍을 가능케 한다.
		   
		2. 클래스와 객체
		 1) 클래스란?
		   : 객체를 정의해 높은 것이다.
		   : 객체의 설계도 또는 틀이다.
		   
		      클래스		객체
		    TV 설계도		TV
		    
		 2) 객체란?
		   : 실제로 존재하는 것, 사물 또는 개념
		   : 객체의 구성요소
		     - 속성(멤버변수, 특성, 필드, 상태)
		          크기, 길이, 색상, 무게, 전원, 채널, 볼륨...
		     - 메서드
		          켜기, 끄기, 볼륨높이기, 채널 변경...
		 
		3. 인스턴스란?
		   - 클래스로부터 객체를 만드는 과정을 클래스의 인스턴스화라고 한다.
		   - Tv클래스로부터 만들어진 객체를 Tv클래스의 인스턴스라고 한다.
		   - 인스턴스 생성방법
		        클래스명 변수명;       => 클래스의 객체를 참조하기 위한 참조변수를 선언
		     Tv t;
		        변수명 = new 클래스명()=> 클래스의 객체를 생성 후, 객체의 "주소"를 참조변수에 저장
		     t = new Tv();
		        
		   - 인스턴스는 참조변수를 통해서만 다룰 수 있다.
		       참조변수의 타입은 인스턴스의 타입과 일치해야 한다.
		       
		4. 선언 위치에 따른 변수의 종류 
		   - 지역변수, 전역변수(클래스변수, 인스턴스변수)
		   - 인스턴스변수
		     : 클래스의 영역에 선언되며, 클래스의 인스턴스를 생성할 때 만들어진다.
		     : 인스턴스 변수의 값을 읽어오거나 변경하기 위해서는 먼저 인스턴스화를 진행해야 한다.
		     : 인스턴스는 "독립적"인 저장공간을 가지므로 서로 다른 값을 가질 수 있다.
		           그럼으로 인스턴스마다 고유한 상태를 유지해야하는 속성의 경우 인스턴스 변수로 선언한다.
		   
		   - 클래스변수
		     : 모든 인스턴스가 공통된 저장공간을 "공유"하게 된다.
		 	     한 클래스의 모든 인스턴스들이 공통적인 값을 유지해야 하는 경우 클래스변수로 선언한다.
		 	 : 인스턴스 변수앞에 static만 붙이면 된다.
		 	 
		   - 지역변수
		     : 메서드내에 선언되면 메서드 내에서만 사용가능하다.
		     : 메서드 종료시 소멸되게 된다.
		
		 */
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	}

}
